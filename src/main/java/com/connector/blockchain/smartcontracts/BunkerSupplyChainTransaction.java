package com.connector.blockchain.smartcontracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class BunkerSupplyChainTransaction extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_GETALLPARTICIPANTS = "getAllParticipants";

    public static final String FUNC_GETALLTESTLABS = "getAllTestLabs";

    public static final String FUNC_GETTESTLABSCOUNT = "getTestLabsCount";

    public static final String FUNC_ADDTESTLAB = "addTestLab";

    public static final String FUNC_REMOVEPARTICIPANT = "removeParticipant";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETADMINCOUNT = "getAdminCount";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_REMOVETESTLAB = "removeTestLab";

    public static final String FUNC_GETPARTICIPANTCOUNT = "getParticipantCount";

    public static final String FUNC_ADDPARTICIPANT = "addParticipant";

    public static final String FUNC_GETALLADMINS = "getAllAdmins";

    public static final String FUNC_CREATETRANSACTION = "createTransaction";

    public static final String FUNC_APPROVEVOIDTRANSACTION = "approveVoidTransaction";

    public static final String FUNC_DISAPPROVEVOIDTRANSACTION = "disapproveVoidTransaction";

    public static final String FUNC_GETAPPROVALSTATUS = "getApprovalStatus";

    public static final String FUNC_GETTRANSACTION = "getTransaction";

    public static final String FUNC_GETPERSONALTRANSACTION = "getPersonalTransaction";

    public static final String FUNC_GETTIMEDIFFERENCE = "getTimeDifference";

    public static final String FUNC_SETVOIDTIME = "setVoidTime";

    public static final String FUNC_CHECKTXIDEXIST = "checkTxIdExist";

    public static final Event TRANSACTIONCREATED_EVENT = new Event("TransactionCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSACTIONVOIDED_EVENT = new Event("TransactionVoided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSACTIONSTATUSUPDATED_EVENT = new Event("TransactionStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADMINADDORREMOVE_EVENT = new Event("AdminAddOrRemove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TESTLABADDORREMOVE_EVENT = new Event("TestLabAddOrRemove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event PARTICIPANTADDORREMOVE_EVENT = new Event("ParticipantAddOrRemove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    public static String getAddresses() {
        return _addresses.values().iterator().next();
    }

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x839fd8d5ea289ec6a25c4b66f4c490da198c8a18");
    }

    @Deprecated
    protected BunkerSupplyChainTransaction(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BunkerSupplyChainTransaction(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BunkerSupplyChainTransaction(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BunkerSupplyChainTransaction(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(String _adminAddress) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getAllParticipants() {
        final Function function = new Function(FUNC_GETALLPARTICIPANTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getAllTestLabs() {
        final Function function = new Function(FUNC_GETALLTESTLABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getTestLabsCount() {
        final Function function = new Function(FUNC_GETTESTLABSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addTestLab(String _testLabAddress) {
        final Function function = new Function(
                FUNC_ADDTESTLAB, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_testLabAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeParticipant(String _participantAddress) {
        final Function function = new Function(
                FUNC_REMOVEPARTICIPANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_participantAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(String _adminAddress) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getAdminCount() {
        final Function function = new Function(FUNC_GETADMINCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String _newOwnerAddress) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwnerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeTestLab(String _testLabAddress) {
        final Function function = new Function(
                FUNC_REMOVETESTLAB, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_testLabAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getParticipantCount() {
        final Function function = new Function(FUNC_GETPARTICIPANTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addParticipant(String _participantAddress) {
        final Function function = new Function(
                FUNC_ADDPARTICIPANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_participantAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getAllAdmins() {
        final Function function = new Function(FUNC_GETALLADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public List<TransactionCreatedEventResponse> getTransactionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONCREATED_EVENT, transactionReceipt);
        ArrayList<TransactionCreatedEventResponse> responses = new ArrayList<TransactionCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionCreatedEventResponse typedResponse = new TransactionCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.transactionDate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.supplyOrg = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.receiveOrg = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransactionCreatedEventResponse> transactionCreatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransactionCreatedEventResponse>() {
            @Override
            public TransactionCreatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSACTIONCREATED_EVENT, log);
                TransactionCreatedEventResponse typedResponse = new TransactionCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.transactionDate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.supplyOrg = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.receiveOrg = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransactionCreatedEventResponse> transactionCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONCREATED_EVENT));
        return transactionCreatedEventObservable(filter);
    }

    public List<TransactionVoidedEventResponse> getTransactionVoidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONVOIDED_EVENT, transactionReceipt);
        ArrayList<TransactionVoidedEventResponse> responses = new ArrayList<TransactionVoidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionVoidedEventResponse typedResponse = new TransactionVoidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.otherParty = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransactionVoidedEventResponse> transactionVoidedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransactionVoidedEventResponse>() {
            @Override
            public TransactionVoidedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSACTIONVOIDED_EVENT, log);
                TransactionVoidedEventResponse typedResponse = new TransactionVoidedEventResponse();
                typedResponse.log = log;
                typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.otherParty = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransactionVoidedEventResponse> transactionVoidedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONVOIDED_EVENT));
        return transactionVoidedEventObservable(filter);
    }

    public List<TransactionStatusUpdatedEventResponse> getTransactionStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<TransactionStatusUpdatedEventResponse> responses = new ArrayList<TransactionStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionStatusUpdatedEventResponse typedResponse = new TransactionStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransactionStatusUpdatedEventResponse> transactionStatusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransactionStatusUpdatedEventResponse>() {
            @Override
            public TransactionStatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSACTIONSTATUSUPDATED_EVENT, log);
                TransactionStatusUpdatedEventResponse typedResponse = new TransactionStatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.status = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransactionStatusUpdatedEventResponse> transactionStatusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONSTATUSUPDATED_EVENT));
        return transactionStatusUpdatedEventObservable(filter);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnerChangedEventResponse> ownerChangedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERCHANGED_EVENT, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnerChangedEventResponse> ownerChangedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERCHANGED_EVENT));
        return ownerChangedEventObservable(filter);
    }

    public List<AdminAddOrRemoveEventResponse> getAdminAddOrRemoveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDORREMOVE_EVENT, transactionReceipt);
        ArrayList<AdminAddOrRemoveEventResponse> responses = new ArrayList<AdminAddOrRemoveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddOrRemoveEventResponse typedResponse = new AdminAddOrRemoveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AdminAddOrRemoveEventResponse> adminAddOrRemoveEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AdminAddOrRemoveEventResponse>() {
            @Override
            public AdminAddOrRemoveEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDORREMOVE_EVENT, log);
                AdminAddOrRemoveEventResponse typedResponse = new AdminAddOrRemoveEventResponse();
                typedResponse.log = log;
                typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AdminAddOrRemoveEventResponse> adminAddOrRemoveEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDORREMOVE_EVENT));
        return adminAddOrRemoveEventObservable(filter);
    }

    public List<TestLabAddOrRemoveEventResponse> getTestLabAddOrRemoveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TESTLABADDORREMOVE_EVENT, transactionReceipt);
        ArrayList<TestLabAddOrRemoveEventResponse> responses = new ArrayList<TestLabAddOrRemoveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TestLabAddOrRemoveEventResponse typedResponse = new TestLabAddOrRemoveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.testLabAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TestLabAddOrRemoveEventResponse> testLabAddOrRemoveEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TestLabAddOrRemoveEventResponse>() {
            @Override
            public TestLabAddOrRemoveEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TESTLABADDORREMOVE_EVENT, log);
                TestLabAddOrRemoveEventResponse typedResponse = new TestLabAddOrRemoveEventResponse();
                typedResponse.log = log;
                typedResponse.testLabAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TestLabAddOrRemoveEventResponse> testLabAddOrRemoveEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TESTLABADDORREMOVE_EVENT));
        return testLabAddOrRemoveEventObservable(filter);
    }

    public List<ParticipantAddOrRemoveEventResponse> getParticipantAddOrRemoveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PARTICIPANTADDORREMOVE_EVENT, transactionReceipt);
        ArrayList<ParticipantAddOrRemoveEventResponse> responses = new ArrayList<ParticipantAddOrRemoveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ParticipantAddOrRemoveEventResponse typedResponse = new ParticipantAddOrRemoveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.participantAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ParticipantAddOrRemoveEventResponse> participantAddOrRemoveEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ParticipantAddOrRemoveEventResponse>() {
            @Override
            public ParticipantAddOrRemoveEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PARTICIPANTADDORREMOVE_EVENT, log);
                ParticipantAddOrRemoveEventResponse typedResponse = new ParticipantAddOrRemoveEventResponse();
                typedResponse.log = log;
                typedResponse.participantAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.eventDate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emittedBy = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ParticipantAddOrRemoveEventResponse> participantAddOrRemoveEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PARTICIPANTADDORREMOVE_EVENT));
        return participantAddOrRemoveEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> createTransaction(BigInteger _transactionId, BigInteger _batchId, BigInteger _quantity, BigInteger _transactionDate, String _supplyOrg, String _receiveOrg, String _status, List<BigInteger> _sourceTransactionIds) {
        final Function function = new Function(
                FUNC_CREATETRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_batchId), 
                new org.web3j.abi.datatypes.generated.Uint256(_quantity), 
                new org.web3j.abi.datatypes.generated.Uint256(_transactionDate), 
                new org.web3j.abi.datatypes.Address(_supplyOrg), 
                new org.web3j.abi.datatypes.Address(_receiveOrg), 
                new org.web3j.abi.datatypes.Utf8String(_status), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_sourceTransactionIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approveVoidTransaction(BigInteger _transactionId, String _otherParty) {
        final Function function = new Function(
                FUNC_APPROVEVOIDTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId), 
                new org.web3j.abi.datatypes.Address(_otherParty)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> disapproveVoidTransaction(BigInteger _transactionId) {
        final Function function = new Function(
                FUNC_DISAPPROVEVOIDTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> getApprovalStatus(BigInteger _transactionId) {
        final Function function = new Function(FUNC_GETAPPROVALSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, String, String, List<BigInteger>, BigInteger>> getTransaction(BigInteger _transactionId) {
        final Function function = new Function(FUNC_GETTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, String, String, List<BigInteger>, BigInteger>>(
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, String, String, List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, String, String, List<BigInteger>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, String, String, List<BigInteger>, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                convertToNative((List<Uint256>) results.get(7).getValue()), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<List> getPersonalTransaction() {
        final Function function = new Function(FUNC_GETPERSONALTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getTimeDifference(BigInteger _transactionId) {
        final Function function = new Function(FUNC_GETTIMEDIFFERENCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setVoidTime(BigInteger newTime) {
        final Function function = new Function(
                FUNC_SETVOIDTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> checkTxIdExist(BigInteger _transactionId) {
        final Function function = new Function(FUNC_CHECKTXIDEXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static RemoteCall<BunkerSupplyChainTransaction> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BunkerSupplyChainTransaction.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BunkerSupplyChainTransaction> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BunkerSupplyChainTransaction.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<BunkerSupplyChainTransaction> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BunkerSupplyChainTransaction.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BunkerSupplyChainTransaction> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BunkerSupplyChainTransaction.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static BunkerSupplyChainTransaction load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BunkerSupplyChainTransaction(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BunkerSupplyChainTransaction load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BunkerSupplyChainTransaction(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BunkerSupplyChainTransaction load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BunkerSupplyChainTransaction(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BunkerSupplyChainTransaction load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BunkerSupplyChainTransaction(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class TransactionCreatedEventResponse {
        public Log log;

        public BigInteger transactionId;

        public BigInteger batchId;

        public BigInteger quantity;

        public BigInteger transactionDate;

        public String supplyOrg;

        public String receiveOrg;

        public BigInteger eventDate;

        public String emittedBy;
    }

    public static class TransactionVoidedEventResponse {
        public Log log;

        public BigInteger transactionId;

        public String otherParty;

        public BigInteger eventDate;

        public String emittedBy;
    }

    public static class TransactionStatusUpdatedEventResponse {
        public Log log;

        public BigInteger transactionId;

        public String status;

        public BigInteger eventDate;

        public String emittedBy;
    }

    public static class OwnerChangedEventResponse {
        public Log log;

        public String oldOwner;

        public String newOwner;

        public BigInteger eventDate;

        public String emittedBy;
    }

    public static class AdminAddOrRemoveEventResponse {
        public Log log;

        public String adminAddress;

        public BigInteger eventDate;

        public String eventType;

        public String emittedBy;
    }

    public static class TestLabAddOrRemoveEventResponse {
        public Log log;

        public String testLabAddress;

        public BigInteger eventDate;

        public String eventType;

        public String emittedBy;
    }

    public static class ParticipantAddOrRemoveEventResponse {
        public Log log;

        public String participantAddress;

        public BigInteger eventDate;

        public String eventType;

        public String emittedBy;
    }
}
